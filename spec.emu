<!doctype html>
<meta charset="utf8">
<link rel="stylesheet" href="./spec.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/8.4/styles/github.min.css">
<pre class="metadata">
title: JavaScript Module Blocks
stage: 2
contributors: Surma, Dan Ehrenberg, Caridy Patiño
</pre>

<emu-clause id="sec-primary-expression">
  <h1>Primary Expression</h1>
  <h2>Syntax</h2>
  <emu-grammar type="definition">
    PrimaryExpression[Yield, Await] :
      IdentifierReference[?Yield, ?Await]
      Literal
      ArrayLiteral[?Yield, ?Await]
      ObjectLiteral[?Yield, ?Await]
      FunctionExpression
      ClassExpression[?Yield, ?Await]
      GeneratorExpression
      AsyncFunctionExpression
      AsyncGeneratorExpression
      <ins>ModuleBlockExpression</ins>
      RegularExpressionLiteral
      TemplateLiteral[?Yield, ?Await, ~Tagged]
      CoverParenthesizedExpressionAndArrowParameterList[?Yield, ?Await] #parencover
  </emu-grammar>
</emu-clause>

<emu-clause id="sec-module-block-definitions">
  <h1>Module Block Definitions</h1>
  <h2>Syntax</h2>
  <emu-grammar type="definition">
    ModuleBlockExpression :
      `module` [no LineTerminator here] `{` ModuleBody? `}`
  </emu-grammar>

  <emu-clause id="sec-module-block-definitions-runtime-semantics-evaluation">
    <h1>Runtime Semantics: Evaluation</h1>
    <emu-grammar>PrimaryExpression : ModuleBlockExpression</emu-grammar>
    <emu-alg>
      1. Let _referencingScriptOrModule_ be GetActiveScriptOrModule().
      1. Let _moduleSource_ be ? OrdinaryObjectCreate(*"%ModuleSource.prototype%"*, « [[ModuleSource]] »).
      1. Set _moduleSource_.[[ModuleSource]] to ? CreateModuleSourceRecord(_body_).
      1. Let _O_ be ? OrdinaryObjectCreate(*"%Module.prototype%"*, « [[Module]], [[ModuleSourceInstance]], [[ImportHook]] »).
      1. Let _moduleRecord_ to ! CreateModuleRecord(_moduleSource_.[[ModuleSource]]).
      1. Set _moduleRecord_.[[ModuleInstance]] to _O_.
      1. Set _O_.[[Module]] to _moduleRecord_.
      1. Set _O_.[[ModuleSourceInstance]] to _moduleSource_.
      1. If _referencingScriptOrModule_ is a Module Record whose [[ModuleInstance]] internal slot value is not *undefined*, then
        1. Let _importHookClosure_ be a new Abstract Closure with parameters (_specifier_) that captures _referencingScriptOrModule_ and performs the following steps when called
          1. Assert: Type(_specifier_) is String.
          1. Let _promiseCapability_ be ! NewPromiseCapability(%Promise%).
          1. Perform HostImportModuleDynamically(_referencingScriptOrModule_, _specifier_, _promiseCapability_).
          1. Return _promiseCapability_.[[Promise]].
        1. Let _importHook_ be CreateBuiltinFunction(_importHookClosure_, 1, *""*, &laquo; &raquo;).
      1. Else,
        1. NOTE: covers the case of a module block inside a source used to create a Module Instance.
        1. Let _importHook_ be _referencingScriptOrModule_.[[ModuleInstance]].[[ImportHook]].
        1. Set _moduleRecord_.[[ImportMeta]] be _referencingScriptOrModule_.[[ImportMeta]].
      1. Set _O_.[[ImportHook]] be _importHook_.
      1. Perform HostInitializeModuleBlock(_moduleRecord_, _referencingScriptOrModule_).
      1. Return _O_.
    </emu-alg>
  </emu-clause>
</emu-clause>

<emu-clause id="sec-moduleblocks-abstract-operations">
  <h1>Module Block Abstract Operations</h1>
  <emu-clause id="sec-hostinitializemoduleblock" type="host-defined abstract operation">
    <h1>
      HostInitializeModuleBlock (
        _moduleRecord_: a Module Record,
        _referencingScriptOrModule_: a Script Record, a Module Record, or *null*
      ): ~unused~
    </h1>
    <dl class="header">
      <dt>description</dt>
      <dd>Initializes a Module Record corresponding to a Module Block with host-dependent information.</dd>
    </dl>
  </emu-clause>
  <emu-note type="editor">
    The host can make the arrangements to support import.meta and probably to add [[HostDefined]] field on the Module Record. If _referencingScriptOrModule_ is a Module Record, it could be a Module Record associated to another Module Instance, in which case [[ImportMeta]] field can be copied from it.
  </emu-note>
</emu-clause>
